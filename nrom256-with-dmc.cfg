#
# Linker script for NROM-256 games
# Copyright 2010-2024 Damian Yerrick
#
# Copying and distribution of this file, with or without
# modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.
# This file is offered as-is, without any warranty.
#
MEMORY {
  # skip $0000-$000F to allow use as local variables
  ZP:     start = $0010, size = $f0, type = rw;
  # skip $0100-$01FF (CPU stack) and $0200-$02FF (common location
  # for shadow OAM)
  RAM:    start = $0300, size = $0500, type = rw;

  # An iNES executable consists of a header, the contents of
  # PRG ROM, and the contents of CHR ROM if present, in that order.
  # The header is not readable by the NES.  It specifies to an
  # emulator which cartridge circuit board is in use.
  #
  # This configuration splits PRG ROM into low 16K and high 16K
  # because DMC samples must go in the high 16K.
  # If you run out of room in RODATA, try moving something
  # to RODATA80.
  HEADER: start = 0, size = $0010, type = ro, file = %O, fill=yes, fillval=$00;
  ROM80:   start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROMC0:   start = $C000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF;
  CHRROM:  start = $0000, size = $2000, type = ro, file = %O, fill=yes, fillval=$FF;
}

SEGMENTS {
  INESHDR:  load = HEADER, type = ro, align = $10;
  ZEROPAGE: load = ZP, type = zp;
  BSS:      load = RAM, type = bss, define = yes, align = $100;
  CODE80:   load = ROM80, type = ro, align = $100, optional = yes;
  RODATA80: load = ROM80, type = ro, align = $100, optional = yes;
  DMC:      load = ROMC0, type = ro, align = 64, optional = yes;
  CODE:     load = ROMC0, type = ro, align = $100;
  RODATA:   load = ROMC0, type = ro, align = $100;
  VECTORS:  load = ROMC0, type = ro, start = $FFFA;
  CHR:      load = CHRROM, type = ro, align = 16, optional = yes;
}

FILES {
  %O: format = bin;
}

